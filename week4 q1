#include <iostream>
using namespace std;
int comp=0 , shift=0 ;
void swap(int*a,int*b)
{
    int t=*a;
    *a=*b;  
    *b=t;
}
//23 45 21 76 46 89 45 32
//54 65 21 76 78 97 46 32 51 21 
int partition (int arr[], int low, int high)
{
    int pivot = arr[high]; // pivot
    int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far
 
    for (int j = low; j <= high - 1; j++)
    {
        // If current element is smaller than the pivot
        if (arr[j] < pivot)
        {
            comp++;
            i++; // increment index of smaller element
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    shift++;
    return (i + 1);
}
 
/* The main function that implements QuickSort
arr[] --> Array to be sorted,
low --> Starting index,
high --> Ending index */
void quicksort(int arr[], int low, int high)
{
    if (low < high)
    { comp++;
        /* pi is partitioning index, arr[p] is now
        at right place */
        int pi = partition(arr, low, high);
 
        // Separately sort elements before
        // partition and after partition
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

void disp(int *a, int n)
{
    for (int i = 0; i < n; i++)
        cout << a[i] << " ";
    cout << endl;
}
void input(int *a, int n)
{
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
}
int main()
{
    int t;
    cin >> t;

    while (t--)
    {
        int n;
        cin >> n;
        int a[n];
        input(a, n);
        quicksort(a,0,n-1);
        disp(a, n);
          cout << "comparisons=" << comp << endl;
    cout << "Shifts=" << shift << endl;

        // findduplicate(a,n);
    }
}
